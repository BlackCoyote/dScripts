IRCBOT_version:
  type: version
  name: smallIRCbot
  id: 97
  description: a small IRC Bot
  version: 7
IRCBOT:
  type: world
  debug: false
  events:
    on server start:
    - wait 1t
    - inject locally path:check_config
    - inject locally path:IRC_connect
    on reload scripts:
    - wait 1t
    - inject locally path:check_config
    on ircconnect command:
    - if <player.is_op.not> queue clear
    - determine fulfilled passively
    - inject locally path:IRC_connect
    on player chats:
    - define message "<&7><player.name><&co> <context.message>"
    - run ircbot_message "def:consoles|<def[message].escaped>"
    on player joins:
    - define message "<&e><player.name> joined"
    - run ircbot_message "def:consoles|<def[message].escaped>"
    on player quits:
    - define message "<&e><player.name> left"
    - run ircbot_message "def:consoles|<def[message].escaped>"
    on irc message:
    - if <context.message.starts_with[<&lt>action]> queue clear
    - define speaker <context.speaker.escaped>
    - if <server.flag[ircbot.users].as_list||li@> !contains <def[speaker]> flag server ircbot.users:->:<def[speaker]>
    - define colour <yaml[small_irc_bot_config].read[config.colour]||3>
    - if <server.has_flag[ircbot.message_for_<def[speaker]>]> {
      - irc message <context.channel> "<&%colour%><def[speaker]>! I have messages for you!"
      - foreach "<server.flag[ircbot.message_for_<def[speaker]>].as_list>" {
        - irc message <context.channel> "<&%colour%><def[value].unescaped>"
        }
      - flag server ircbot.message_for_<def[speaker]>:!
      }
    - if <context.message.starts_with[<yaml[small_irc_bot_config].read[config.command]||<&lt>>].not> && <context.message.starts_with[<yaml[small_irc_bot_config].read[config.secondary_command]||<&lt>>].not> queue clear
    - define channel <context.channel>
    - define usedcommand <context.message.substring[1,1]||<&lt>>
    - define args <context.message.after[<def[usedcommand]>].replace[<&chr[000D]>].split_by[<&sp>]||none>
    - if <yaml[small_irc_bot_config].read[config.admins]||li@> !contains <context.speaker.replace[<&chr[000D]>]> {
      - define is_op false
      } else {
      - define is_op true
      }
    - event "irccommand" context:args|<def[args].space_separated>|is_op|<def[is_op]> save:result
    - if <entry[result].determinations> contains cancelled {
      - queue clear
      }
    - choose <def[args].get[1]||null>:
      - case status:
        - define message "Status<&co> online - TPS<&co> <server.recent_tps.get[1].as_money> - Players<&co> <server.list_online_players.size||0>"
      - case version:
        - define message "server<&co> <server.version> - denizen<&co> <server.denizen_version> - depenizen<&co> <pl@depenizen.version||N/A>"
      - case tag:
        - define tag <def[args].get[2].to[999].substring[4]>
        - define message "returned<&co> <parse:<def[tag]>>"
      - case online:
        - define message "<server.list_online_players.formatted>"
      - case drs:
        - if <def[is_op].not> {
          - define message "You can't do this! D<&co><&lt>"
          } else {
          - execute as_server "denizen reload scripts"
          - define message "Reloaded all denizen scripts."
          }
      - case ex:
        - if <def[is_op].not> {
          - define message "You can't do this!"
          } else {
          - execute as_server "<def[args].get[2].to[500].space_separated||null>" save:result
          - define message "<entry[result].output>"
          }
      - case chat:
        - if <yaml[small_irc_bot_config].read[config.chat_command.allow_use].not||false> {
          - queue clear
          }
        - define player <server.match_offline_player[<def[speaker].unescaped>]||none>
        - if <def[player]> == none {
          - define message "Not a valid player trying to chat!"
          - goto finish
          }
        - if <yaml[small_irc_bot_config].read[config.chat_command.trigger_event]||false> {
          - event "player chats" "context:message|<def[args].get[2].to[500].space_separated||>|prefix|<&8>I|irc|true|is_external|true" player:<def[player]>
          } else {
          - announce "<&lb>IRC<&rb><&pipe><&8><def[player].name><&co><&f> <def[args].get[2].to[500].space_separated||>"
          }
      - case msg:
        - define from <def[speaker]>
        - define to <def[args].get[2]||none>
        - if %to% == none {
          - define message "Please specify a player to send a message to."
          - goto finish
          } else if <server.flag[ircbot.users].as_list> !contains %to% {
          - define message "I have not seen %to% before!"
          - goto finish
          }
        - define msg "<context.message.after[%to%].replace[<&chr[000D]>]||null>"
        - if %msg% == "null" {
          - define message "Please specify a valid message."
          - goto finish
          }
        - flag server "ircbot.message_for_%to%:->:<&lb><util.date.time.year>/<util.date.time.month>/<util.date.time.day> <util.date.time><&rb> %from% - <def[msg].escaped>"
        - define message "Your message has been saved."
    - if <entry[result].determinations.filter[starts_with[message=]].is_empty.not> {
      - define message <entry[result].determinations.filter[starts_with[message=]].get[1].after[message=]>
      }
    - mark finish
    - if <def[message].exists.not> queue clear
    - irc message %channel% "<&%colour%>%message%"
  irc_connect:
    - run IRCBOT_connect instantly
  check_config:
    - if <server.has_file[/small_irc_bot/config.yml]> {
      - yaml load:/small_irc_bot/config.yml id:small_irc_bot_config
      } else {
      - yaml create id:small_irc_bot_config
      - yaml id:small_irc_bot_config set config.channels.consoles:->:irc.mcmonkey.org#myfancychannel
      - yaml id:small_irc_bot_config set config.channels.active:->:irc.esper.net#myotherchannel
      - yaml id:small_irc_bot_config set config.admins:->:mrAdmin
      - yaml id:small_irc_bot_config set config.botname:bottymcbotface
      - yaml id:small_irc_bot_config set config.password:dickbutt
      - yaml id:small_irc_bot_config set config.command:<&lt>
      - yaml id:small_irc_bot_config set config.secondary_command:.
      - yaml id:small_irc_bot_config set config.colour:3
      - yaml id:small_irc_bot_config set config.chat_command.trigger_event:false
      - yaml id:small_irc_bot_config set config.chat_command.allow_use:true
      - yaml savefile:/small_irc_bot/config.yml id:small_irc_bot_config
      }
IRCBOT_connect:
  type: task
  debug: false
  script:
    - define list <parse:<yaml[small_irc_bot_config].read[config.channels.consoles].include[<yaml[small_irc_bot_config].read[config.channels.active]||li@>]||li@>>
    - define servers <def[list].parse[before[<&ns>]].deduplicate>
    - foreach <def[servers]>:
      - ~irc quit ircserver@<def[value]>
      - ~irc connect ircserver@<def[value]>
      - irc raw ircserver@<def[value]> "USER <yaml[small_irc_bot_config].read[config.botname]||mcbotface> <yaml[small_irc_bot_config].read[config.botname]||mcbotface>_ <yaml[small_irc_bot_config].read[config.botname]||mcbotface>__ <yaml[small_irc_bot_config].read[config.botname]||mcbotface>"
      - irc raw ircserver@<def[value]> "NICK <yaml[small_irc_bot_config].read[config.botname]||mcbotface>"
      - irc raw ircserver@<def[value]> "msg nickserv identify <yaml[small_irc_bot_config].read[config.password]||mcbotface>"
    - foreach <def[list]>:
      - irc join ircchannel@<def[value]>
IRCBOT_message:
  type: task
  debug: false
  script:
  - if <server.has_flag[overlord_flood]> {
    - define wait <server.flag[overlord_flood].as_int||1>t
    - flag server overlord_flood:+:10 duration:2s
    - wait <def[wait]>
    }
    else {
    - flag server overlord_flood:+:10 duration:2s
    }
  - define type <def[1]||consoles>
  - choose <def[type]>:
    - case all:
      - define list <parse:<yaml[small_irc_bot_config].read[config.channels.consoles].include[<yaml[small_irc_bot_config].read[config.channels.active]||li@>]||li@>>
    - case consoles:
      - define list <parse:<yaml[small_irc_bot_config].read[config.channels.consoles]||li@>>
    - case active:
      - define list <parse:<yaml[small_irc_bot_config].read[config.channels.active]||li@>>
    - default:
      - debug error "No valid servers were specified to run <script> for."
      - queue clear
  - define message <def[2].unescaped||null>
  - foreach <def[list]>:
    - irc message ircchannel@<def[value]> "<&6><def[message]>"
overlord_situation_responses:
  type: world
  debug: false
  events:
    on script generates error:
    - define message "<&5>[ERROR] <&4><context.script||<context.queue||undefined>><&co><&6> <context.message>"
    - run IRCBOT_message instantly "def:consoles|<def[message].escaped>" instantly
    on system time minutely:
    - if <server.recent_tps.get[1]> <= 19 {
      - define message "<&9>[WARNING] - <&6> TPS LOW! (<server.recent_tps.get[1]>)."
      - run IRCBOT_message instantly "def:all|<def[message].escaped>" instantly
      }
    on system time hourly:
    - webget "http://morphanone.space/webizen.aspx/tracker?script=97&version=<s@ircbot_version.yaml_key[version]>"